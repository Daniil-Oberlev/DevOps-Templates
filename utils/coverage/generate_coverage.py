#!/usr/bin/env python3
import os
import sys
import subprocess
from pathlib import Path

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
CONTAINER_DIRS = {'tools', 'utils', 'coverage'}
EXCLUDE_DIRS = {'.git', '.github', '.vscode'}
TEST_TIMEOUT = 300
BADGE_WIDTH = 125
BADGE_HEIGHT = 20
BADGE_DIR = Path('utils/coverage')
BADGE_FILENAME = 'coverage-badge.svg'

# –¶–≤–µ—Ç–∞ –¥–ª—è badge –≤ RGB
COLOR_BRIGHTGREEN = "#4c1"
COLOR_GREEN = "#97ca00"
COLOR_YELLOWGREEN = "#a4a61d"
COLOR_YELLOW = "#dfb317"
COLOR_ORANGE = "#fe7d37"
COLOR_RED = "#e05d44"
COLOR_GREY = "#555"

# –¶–µ–ª–µ–≤—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø—Ä–æ–µ–∫—Ç–æ–≤
DOCKER_FILES = {'Dockerfile'}
NGINX_FILES = {'nginx.conf'}
SCRIPTS_FILES = {'.sh'}
GENERAL_FILES = {'Dockerfile', 'nginx.conf'}

def is_project_directory(dir_path):
    """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–Ω–æ–π (–¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–µ—Å—Ç—ã)"""
    if dir_path.name in CONTAINER_DIRS:
        return False

    target_files = set()

    if 'docker' in dir_path.parts:
        target_files.update(DOCKER_FILES)
        for file in dir_path.iterdir():
            if file.is_file() and file.name.startswith('Dockerfile.'):
                target_files.add(file.name)

    elif 'nginx' in dir_path.parts:
        target_files.update(NGINX_FILES)

    elif 'scripts' in dir_path.parts:
        for file in dir_path.iterdir():
            if file.is_file() and file.suffix in SCRIPTS_FILES and file.name != 'test.sh':
                target_files.add(file.name)

    else:
        target_files.update(GENERAL_FILES)

    for file in dir_path.iterdir():
        if file.is_file() and file.name in target_files:
            return True

    has_subdirs = any(subdir.is_dir() for subdir in dir_path.iterdir())
    has_files = any(file.is_file() and file.name != 'test.sh' for file in dir_path.iterdir())

    return not has_subdirs and has_files

def find_all_directories_without_tests(base_dirs=None):
    """–ù–∞–π—Ç–∏ –≤—Å–µ –ø—Ä–æ–µ–∫—Ç–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –±–µ–∑ test.sh"""
    if base_dirs is None:
        base_dirs = ['.']

    directories_without_tests = []
    directories_with_tests = set()

    test_files = find_all_test_files(base_dirs)
    for test_file in test_files:
        test_dir = Path(test_file).parent
        directories_with_tests.add(str(test_dir))

    for base_dir in base_dirs:
        base_path = Path(base_dir)
        if base_path.exists():
            for dir_path in base_path.rglob('*'):
                if dir_path.is_dir():
                    if any(excluded in dir_path.parts for excluded in EXCLUDE_DIRS):
                        continue

                    dir_str = str(dir_path)
                    if dir_str in directories_with_tests:
                        continue

                    parent_has_tests = any(
                        str(parent) in directories_with_tests for parent in dir_path.parents
                    )
                    if parent_has_tests:
                        continue

                    if is_project_directory(dir_path):
                        directories_without_tests.append(dir_str)

    return sorted(directories_without_tests)

def find_all_test_files(base_dirs=None):
    """–ù–∞–π—Ç–∏ –≤—Å–µ test.sh —Ñ–∞–π–ª—ã —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ"""
    if base_dirs is None:
        base_dirs = ['.']

    test_files = []

    for base_dir in base_dirs:
        base_path = Path(base_dir)
        if base_path.exists():
            for test_file in base_path.rglob('test.sh'):
                if any(excluded in test_file.parts for excluded in EXCLUDE_DIRS):
                    continue
                test_files.append(str(test_file))

    return test_files

def run_single_test(test_file):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–¥–∏–Ω —Ç–µ—Å—Ç –∏ –≤–µ—Ä–Ω—É—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    try:
        result = subprocess.run(
            ['bash', test_file],
            cwd=os.path.dirname(test_file),
            capture_output=True,
            text=True,
            timeout=TEST_TIMEOUT,
            check=False
        )

        success = result.returncode == 0
        status = "‚úÖ PASS" if success else "‚ùå FAIL"
        print(f"{status}: {test_file}")

        return {
            'file': test_file,
            'success': success,
            'stdout': result.stdout,
            'stderr': result.stderr,
            'returncode': result.returncode
        }

    except subprocess.TimeoutExpired:
        print(f"‚è∞ TIMEOUT: {test_file}")
        return {
            'file': test_file,
            'success': False,
            'error': 'Timeout'
        }
    except (OSError, subprocess.SubprocessError) as e:
        print(f"üö´ ERROR: {test_file} - {e}")
        return {
            'file': test_file,
            'success': False,
            'error': str(e)
        }

def run_tests(test_files):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã –∏ —Å–æ–±—Ä–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""
    results = []
    total = len(test_files)
    passed = 0

    for test_file in test_files:
        print(f"Running test: {test_file}")
        result = run_single_test(test_file)
        results.append(result)

        if result['success']:
            passed += 1

    return results, passed, total

def calculate_coverage(passed, total):
    """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ–∫—Ä—ã—Ç–∏—è —Ç–µ—Å—Ç–∞–º–∏"""
    if total == 0:
        return 0.0
    return round((passed / total) * 100, 2)

def get_coverage_color(coverage):
    """–ü–æ–ª—É—á–∏—Ç—å RGB —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–∫—Ä—ã—Ç–∏—è"""
    if coverage >= 90:
        return COLOR_BRIGHTGREEN
    elif coverage >= 80:
        return COLOR_GREEN
    elif coverage >= 70:
        return COLOR_YELLOWGREEN
    elif coverage >= 60:
        return COLOR_YELLOW
    elif coverage >= 50:
        return COLOR_ORANGE
    else:
        return COLOR_RED

def generate_badge(coverage):
    """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å SVG badge —Å –ø—Ä–æ—Ü–µ–Ω—Ç–æ–º –ø–æ–∫—Ä—ã—Ç–∏—è"""
    color = get_coverage_color(coverage)

    badge_svg = f'''<svg xmlns="http://www.w3.org/2000/svg" width="{BADGE_WIDTH}" height="{BADGE_HEIGHT}">
  <linearGradient id="b" x2="0" y2="100%">
    <stop offset="0" stop-color="#bbb" stop-opacity=".1"/>
    <stop offset="1" stop-opacity=".1"/>
  </linearGradient>
  <mask id="a">
    <rect width="{BADGE_WIDTH}" height="{BADGE_HEIGHT}" rx="3" fill="#fff"/>
  </mask>
  <g mask="url(#a)">
    <path fill="{COLOR_GREY}" d="M0 0h67v20H0z"/>
    <path fill="{color}" d="M67 0h58v20H67z"/>
    <path fill="url(#b)" d="M0 0h125v20H0z"/>
  </g>
  <g fill="#fff" text-anchor="middle" font-family="DejaVu Sans,Verdana,Geneva,sans-serif" font-size="11">
    <text x="33.5" y="15" fill="#010101" fill-opacity=".3">tests</text>
    <text x="33.5" y="14">tests</text>
    <text x="95.5" y="15" fill="#010101" fill-opacity=".3">{coverage}%</text>
    <text x="95.5" y="14">{coverage}%</text>
  </g>
</svg>'''

    return badge_svg

def analyze_test_coverage():
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ–∫—Ä—ã—Ç–∏—è —Ç–µ—Å—Ç–∞–º–∏"""
    print("üîç Analyzing test coverage...")

    test_files = find_all_test_files()
    total_tests = len(test_files)

    directories_without_tests = find_all_directories_without_tests()

    passed = 0
    coverage = 0.0
    results = []

    if test_files:
        print(f"üìã Found {total_tests} test files:")
        for test_file in test_files:
            print(f"   - {test_file}")

        print("\nüöÄ Running tests...")
        results, passed, total_tests = run_tests(test_files)
        coverage = calculate_coverage(passed, total_tests)

    return {
        'coverage': coverage,
        'passed': passed,
        'total_tests': total_tests,
        'test_files': test_files,
        'directories_without_tests': directories_without_tests,
        'results': results
    }

def print_results(analysis):
    """–í—ã–≤–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞"""
    print(f"\nüìä Test Coverage: {analysis['coverage']}% ({analysis['passed']}/{analysis['total_tests']})")

    if analysis['directories_without_tests']:
        print(f"\n‚ö†Ô∏è  Directories without tests ({len(analysis['directories_without_tests'])}):")
        for directory in analysis['directories_without_tests']:
            print(f"   - {directory}")
    else:
        print("\nüéâ All project directories have tests!")

def save_badge(coverage):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å badge –≤ —Ñ–∞–π–ª"""
    BADGE_DIR.mkdir(exist_ok=True, parents=True)

    badge = generate_badge(coverage)
    badge_path = BADGE_DIR / BADGE_FILENAME

    with open(badge_path, 'w', encoding='utf-8') as f:
        f.write(badge)

    return badge_path

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    analysis = analyze_test_coverage()
    print_results(analysis)

    badge_path = save_badge(analysis['coverage'])
    print(f"\nüõ°Ô∏è  Coverage badge updated: {badge_path}")

    return 0

if __name__ == '__main__':
    sys.exit(main())
